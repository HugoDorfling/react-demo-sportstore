{"version":3,"sources":["admin/clientQueries.js","admin/OrdersRow.js","admin/OrdersTable.js","admin/clientMutations.js","admin/OrdersConnector.js","admin/ProductsRow.js","admin/ProductsTable.js","admin/ProductsConnector.js","admin/ProductCreator.js","admin/ProductEditor.js","auth/AuthWrapper.js","auth/AuthPrompt.js","admin/Admin.js"],"names":["ordersSummaryQuery","gql","productsList","product","OrdersRow","calcTotal","products","reduce","total","p","quantity","price","toFixed","getShipping","order","shipped","className","render","props","id","name","email","onClick","toggleShipped","Component","OrdersTable","totalSize","PaginationControls","keys","orders","map","key","shipOrder","storeProduct","updateProduct","deleteProduct","vars","onlyShipped","page","pageSize","sort","OrdersConnector","compose","graphql","options","variables","data","loading","refetch","currentPage","pageCount","Math","ceil","navigateToPage","Number","setPageSize","size","sortKey","setSortProperty","mutate","ProductsRow","category","class","Link","to","ProductsTable","prod","ConnectedProducts","update","cache","queryDetails","query","readQuery","filter","writeQuery","ProductCreator","navigate","history","push","mutation","saveMutation","client","ValidatedForm","formModel","defaultAttrs","submitCallback","mode","resetStore","cancelCallback","submitText","cancelText","type","required","label","attrs","disabled","item","defaultValue","toLowerCase","ProductEditor","match","params","authWrapper","WrappedComponent","AuthContext","Consumer","context","AuthPrompt","withRouter","authenticate","credentials","catch","err","setState","errorMessage","message","then","state","ApolloClient","uri","GraphQlUrl","request","gqloperation","setContext","headers","Authorization","webToken","this","ToggleLink","isAuthenticated","signout","Switch","Route","component","path","Redirect"],"mappings":"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","file":"static/js/4.7e268489.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\n\nexport const ordersSummaryQuery = gql`\n  query($onlyShipped: Boolean, $page: Int, $pageSize: Int, $sort: String) {\n    orders(onlyUnshipped: $onlyShipped) {\n      totalSize\n      orders(page: $page, pageSize: $pageSize, sort: $sort) {\n        id\n        name\n        email\n        shipped\n        products {\n          quantity\n          product {\n            price\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const productsList = gql`\n  query($page: Int, $pageSize: Int, $sort: String) {\n    products {\n      totalSize\n      products(page: $page, pageSize: $pageSize, sort: $sort) {\n        id\n        name\n        category\n        price\n      }\n    }\n  }\n`;\n\nexport const product = gql`\n  query($id: ID!) {\n    product(id: $id) {\n      id\n      name\n      description\n      category\n      price\n    }\n  }\n`;\n","import React, { Component } from \"react\";\nexport class OrdersRow extends Component {\n  calcTotal = (products) =>\n    products\n      .reduce((total, p) => (total += p.quantity * p.product.price), 0)\n      .toFixed(2);\n  getShipping = (order) =>\n    order.shipped ? (\n      <i className=\"fa fa-shipping-fast text-success\" />\n    ) : (\n      <i className=\"fa fa-exclamation-circle text-danger\" />\n    );\n  render = () => (\n    <tr>\n      <td>{this.props.order.id}</td>\n      <td>{this.props.order.name}</td>\n      <td>{this.props.order.email}</td>\n      <td className=\"text-right\">\n        ${this.calcTotal(this.props.order.products)}\n      </td>\n      <td className=\"text-center\">\n        <button\n          className=\"btn btn-sm btn-block bg-muted\"\n          onClick={this.props.toggleShipped}\n        >\n          {this.getShipping(this.props.order)}\n          <span>{this.props.order.shipped ? \" Shipped\" : \" Pending\"}</span>\n        </button>\n      </td>\n    </tr>\n  );\n}\n","import React, { Component } from \"react\";\nimport { OrdersRow } from \"./OrdersRow\";\nimport { PaginationControls } from \"../PaginationControls\";\nexport class OrdersTable extends Component {\n  render = () => (\n    <div>\n      <h4 className=\"bg-info text-white text-center p-2\">\n        {this.props.totalSize} Orders\n      </h4>\n      <PaginationControls keys={[\"ID\", \"Name\"]} {...this.props} />\n      <table className=\"table table-sm table-striped\">\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Email</th>\n            <th className=\"text-right\">Total</th>\n            <th className=\"text-center\">Shipped</th>\n          </tr>\n        </thead>\n        <tbody>\n          {this.props.orders.map((order) => (\n            <OrdersRow\n              key={order.id}\n              order={order}\n              toggleShipped={() =>\n                this.props.toggleShipped(order.id, !order.shipped)\n              }\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import gql from \"graphql-tag\";\n\nexport const shipOrder = gql`\n  mutation($id: ID!, $shipped: Boolean!) {\n    shipOrder(id: $id, shipped: $shipped) {\n      id\n      shipped\n    }\n  }\n`;\nexport const storeProduct = gql`\n  mutation($product: productStore) {\n    storeProduct(product: $product) {\n      id\n      name\n      category\n      description\n      price\n    }\n  }\n`;\n\nexport const updateProduct = gql`\n  mutation($product: productUpdate) {\n    updateProduct(product: $product) {\n      id\n      name\n      category\n      description\n      price\n    }\n  }\n`;\n\nexport const deleteProduct = gql`\n  mutation($id: ID!) {\n    deleteProduct(id: $id) {\n      id\n    }\n  }\n`;\n","import { graphql, compose } from \"react-apollo\";\nimport { ordersSummaryQuery } from \"./clientQueries\";\nimport { OrdersTable } from \"./OrdersTable\";\nimport { shipOrder } from \"./clientMutations\";\nconst vars = {\n  onlyShipped: false,\n  page: 1,\n  pageSize: 10,\n  sort: \"id\",\n};\nexport const OrdersConnector = compose(\n  graphql(ordersSummaryQuery, {\n    options: (props) => ({ variables: vars }),\n    props: ({ data: { loading, orders, refetch } }) => ({\n      totalSize: loading ? 0 : orders.totalSize,\n      orders: loading ? [] : orders.orders,\n      currentPage: vars.page,\n      pageCount: loading ? 0 : Math.ceil(orders.totalSize / vars.pageSize),\n      navigateToPage: (page) => {\n        vars.page = Number(page);\n        refetch(vars);\n      },\n      pageSize: vars.pageSize,\n      setPageSize: (size) => {\n        vars.pageSize = Number(size);\n        refetch(vars);\n      },\n      sortKey: vars.sort,\n      setSortProperty: (key) => {\n        vars.sort = key;\n        refetch(vars);\n      },\n    }),\n  }),\n  graphql(shipOrder, {\n    props: ({ mutate }) => ({\n      toggleShipped: (id, shipped) => mutate({ variables: { id, shipped } }),\n    }),\n  })\n)(OrdersTable);\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport class ProductsRow extends Component {\n  render = () => (\n    <tr>\n      <td>{this.props.product.id}</td>\n      <td>{this.props.product.name}</td>\n      <td>{this.props.product.category}</td>\n      <td className=\"text-right\">${this.props.product.price.toFixed(2)}</td>\n      <td className=\"text-center\">\n        <button\n          className=\"btn btn-sm btn-danger mx-1\"\n          onClick={() => this.props.deleteProduct(this.props.product.id)}\n        >\n          Delete <i class=\"fas fa-backspace\"></i>\n        </button>\n        <Link\n          to={`/admin/products/${this.props.product.id}`}\n          className=\"btn btn-sm btn-warning\"\n        >\n          Edit <i class=\"fas fa-edit\"></i>\n        </Link>\n      </td>\n    </tr>\n  );\n}\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { PaginationControls } from \"../PaginationControls\";\nimport { ProductsRow } from \"./ProductsRow\";\n\nexport class ProductsTable extends Component {\n  render = () => (\n    <div>\n      <h4 className=\"bg-info text-white text-center p-2\">\n        {this.props.totalSize} Products\n      </h4>\n      <PaginationControls keys={[\"ID\", \"Name\", \"Category\"]} {...this.props} />\n      <table className=\"table table-sm table-striped\">\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Category</th>\n            <th className=\"text-right\">Price</th>\n            <th className=\"text-center\"></th>\n          </tr>\n        </thead>\n        <tbody>\n          {this.props.products.map((prod) => (\n            <ProductsRow\n              key={prod.id}\n              product={prod}\n              deleteProduct={this.props.deleteProduct}\n            />\n          ))}\n        </tbody>\n      </table>\n      <div className=\"text-center\">\n        <Link\n          to=\"/admin/products/create\"\n          className=\"btn btn-primary create-product-button\"\n        >\n          Create Product <i class=\"far fa-plus-square\"></i>\n        </Link>\n      </div>\n    </div>\n  );\n}\n","import { graphql, compose } from \"react-apollo\";\nimport { ProductsTable } from \"./ProductsTable\";\nimport { productsList } from \"./clientQueries\";\nimport { deleteProduct } from \"./clientMutations\";\n\nconst vars = {\n  page: 1,\n  pageSize: 10,\n  sort: \"id\",\n};\nexport const ConnectedProducts = compose(\n  graphql(productsList, {\n    options: (props) => ({ variables: vars }),\n    props: ({ data: { loading, products, refetch } }) => ({\n      totalSize: loading ? 0 : products.totalSize,\n      products: loading ? [] : products.products,\n      currentPage: vars.page,\n      pageCount: loading ? 0 : Math.ceil(products.totalSize / vars.pageSize),\n      navigateToPage: (page) => {\n        vars.page = Number(page);\n        refetch(vars);\n      },\n      pageSize: vars.pageSize,\n      setPageSize: (size) => {\n        vars.pageSize = Number(size);\n        refetch(vars);\n      },\n      sortKey: vars.sort,\n      setSortProperty: (key) => {\n        vars.sort = key;\n        refetch(vars);\n      },\n    }),\n  }),\n  graphql(deleteProduct, {\n    options: {\n      update: (\n        cache,\n        {\n          data: {\n            deleteProduct: { id },\n          },\n        }\n      ) => {\n        const queryDetails = { query: productsList, variables: vars };\n        const data = cache.readQuery(queryDetails);\n        data.products.products = data.products.products.filter(\n          (p) => p.id !== id\n        );\n        data.products.totalSize = data.products.totalSize - 1;\n        cache.writeQuery({ ...queryDetails, data });\n      },\n    },\n    props: ({ mutate }) => ({\n      deleteProduct: (id) => mutate({ variables: { id } }),\n    }),\n  })\n)(ProductsTable);\n","import React, { Component } from \"react\";\nimport { ValidatedForm } from \"../forms/ValidatedForm\";\nimport { Mutation } from \"react-apollo\";\nimport { storeProduct, updateProduct } from \"./clientMutations\";\n\nexport class ProductCreator extends Component {\n  constructor(props) {\n    super(props);\n    this.defaultAttrs = { type: \"text\", required: true };\n    this.formModel = [\n      { label: \"Name\" },\n      { label: \"Description\" },\n      { label: \"Category\" },\n      { label: \"Price\", attrs: { type: \"number\" } },\n    ];\n    this.mutation = storeProduct;\n    if (this.props.mode === \"edit\") {\n      this.mutation = updateProduct;\n      this.formModel = [\n        { label: \"Id\", attrs: { disabled: true } },\n        ...this.formModel,\n      ].map((item) => ({\n        ...item,\n        attrs: {\n          ...item.attrs,\n          defaultValue: this.props.product[item.label.toLowerCase()],\n        },\n      }));\n    }\n  }\n  navigate = () => this.props.history.push(\"/admin/products\");\n  render = () => {\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col bg-dark text-white\">\n            <div className=\"navbar-brand\">SPORTS STORE</div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col m-2\">\n            <Mutation mutation={this.mutation}>\n              {(saveMutation, { client }) => {\n                return (\n                  <ValidatedForm\n                    formModel={this.formModel}\n                    defaultAttrs={this.defaultAttrs}\n                    submitCallback={(data) => {\n                      saveMutation({\n                        variables: {\n                          product: { ...data, price: Number(data.price) },\n                        },\n                      });\n                      if (this.props.mode !== \"edit\") {\n                        client.resetStore();\n                      }\n                      this.navigate();\n                    }}\n                    cancelCallback={this.navigate}\n                    submitText=\"Save\"\n                    cancelText=\"Cancel\"\n                  />\n                );\n              }}\n            </Mutation>\n          </div>\n        </div>\n      </div>\n    );\n  };\n}\n","import React, { Component } from \"react\";\nimport { Query } from \"react-apollo\";\nimport { ProductCreator } from \"./ProductCreator\";\nimport { product } from \"./clientQueries\";\n\nexport class ProductEditor extends Component {\n  render = () => (\n    <Query query={product} variables={{ id: this.props.match.params.id }}>\n      {({ loading, data }) => {\n        if (!loading) {\n          return (\n            <ProductCreator\n              {...this.props}\n              product={data.product}\n              mode=\"edit\"\n            />\n          );\n        }\n        return null;\n      }}\n    </Query>\n  );\n}\n","import React, { Component } from \"react\";\nimport { AuthContext } from \"./AuthContext\";\n\nexport const authWrapper = (WrappedComponent) =>\n  class extends Component {\n    render = () => (\n      <AuthContext.Consumer>\n        {(context) => <WrappedComponent {...this.props} {...context} />}\n      </AuthContext.Consumer>\n    );\n  };\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { authWrapper } from \"./AuthWrapper\";\nimport { ValidatedForm } from \"../forms/ValidatedForm\";\n\nexport const AuthPrompt = withRouter(\n  authWrapper(\n    class extends Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          errorMessage: null,\n        };\n        this.defaultAttrs = { required: true };\n        this.formModel = [\n          { label: \"Username\", attrs: { defaultValue: \"admin\" } },\n          { label: \"Password\", attrs: { type: \"password\" } },\n        ];\n      }\n      authenticate = (credentials) => {\n        this.props\n          .authenticate(credentials)\n          .catch((err) => this.setState({ errorMessage: err.message }))\n          .then(this.props.history.push(\"/admin\"));\n      };\n      render = () => (\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col bg-dark text-white\">\n              <div className=\"navbar-brand\">SPORTS STORE</div>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col m-2\">\n              {this.state.errorMessage != null && (\n                <h4 className=\"bg-danger text-center text-white m-1 p-2\">\n                  {this.state.errorMessage}\n                </h4>\n              )}\n              <ValidatedForm\n                formModel={this.formModel}\n                defaultAttrs={this.defaultAttrs}\n                submitCallback={this.authenticate}\n                submitText=\"Login\"\n                cancelCallback={() => this.props.history.push(\"/\")}\n                cancelText=\"Cancel\"\n              />\n            </div>\n          </div>\n        </div>\n      );\n    }\n  )\n);\n","import React, { Component } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { GraphQlUrl } from \"../data/Urls\";\nimport { OrdersConnector } from \"./OrdersConnector\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport { ToggleLink } from \"../ToggleLink\";\nimport { ConnectedProducts } from \"./ProductsConnector\";\nimport { ProductEditor } from \"./ProductEditor\";\nimport { ProductCreator } from \"./ProductCreator\";\nimport { AuthPrompt } from \"../auth/AuthPrompt\";\nimport { authWrapper } from \"../auth/AuthWrapper\";\n\n// const graphQlClient = new ApolloClient({\n//   uri: GraphQlUrl,\n// });\n\nexport default authWrapper(class extends Component {\n    constructor(props) {\n      super(props);\n      this.client = new ApolloClient({\n        uri: GraphQlUrl,\n        request: (gqloperation) =>\n          gqloperation.setContext({\n            headers: {\n              Authorization: `Bearer<${this.props.webToken}>`,\n            },\n          }),\n      });\n    }\n    render() {\n      return (\n        <ApolloProvider client={this.client}>\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col bg-info text-white\">\n                <div className=\"navbar-brand\">SPORTS STORE</div>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-3 p-2\">\n                <ToggleLink to=\"/admin/orders\">Orders</ToggleLink>\n                <ToggleLink to=\"/admin/products\">Products</ToggleLink>\n                {this.props.isAuthenticated && (\n                  <button\n                    onClick={this.props.signout}\n                    className=\"btn btn-block btn-secondary m-2 fixed-bottom col-3\"\n                  >\n                    Log Out\n                  </button>\n                )}\n              </div>\n              <div className=\"col p-2\">\n                <Switch>\n                  {!this.props.isAuthenticated && (\n                    <Route component={AuthPrompt} />\n                  )}\n                  <Route path=\"/admin/orders\" component={OrdersConnector} />\n                  <Route\n                    path=\"/admin/products/create\"\n                    component={ProductCreator}\n                  />\n                  <Route path=\"/admin/products/:id\" component={ProductEditor} />\n                  <Route\n                    path=\"/admin/products/\"\n                    component={ConnectedProducts}\n                  />\n                  <Redirect to=\"/admin/orders\" />\n                </Switch>\n              </div>\n            </div>\n          </div>\n        </ApolloProvider>\n      );\n    }\n  }\n);\n"],"sourceRoot":""}